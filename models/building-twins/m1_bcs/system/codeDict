/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      codeDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


customBC_T
{
    code
        #{
           //  Define your constants, pull in the patch and face centers
           const scalar A = 0.0, B = 0.0, C = 5.0;
           const scalar pi = 3.14159265358979323846;
           // access the face centers (Cf)
           const fvPatch& patch = this->patch();
           const vectorField& cf = patch.Cf();
            // refValue:
              forAll(patch, i)
              {
                this->refValue()[i]  = //refValue or refGrad
                // A*sin(2*pi/46*cf[i].x()) // sine
                // -A*cf[i].x()*cf[i].x()/23.0/23.0 + A //parabolic
                290-A*Foam::exp( -Foam::pow((cf[i].x() - B), 2) / (2*C*C) ) //gaussian
                ;

            // refGrad:
                 this->refGrad()[i] = 0;
               }
            // valueFraction:
        #};
}

customBC_U
{
    code
        #{
           //  Define your constants
           //  vectical scales Ai
           const scalar A1 = 2.0, A2 = 0.0, A3 = 7.0;
           //  horizontal scales Bi
           const scalar B1 = 2.0, B2 = 4.0, B3 = 2.0;
           //  centers Ci
           const scalar C1 = -20.0, C2 = 0.0, C3 = 20.0;
           //  vertical shift D
           const scalar D = 0.0;
           const scalar pi = 3.14159265358979323846;
           // access the face centers (Cf)
           const fvPatch& patch = this->patch();
           const vectorField& cf = patch.Cf();
            // refValue:
              forAll(patch, i)
              {
                    this->refValue()[i] = 
                    vector(
                        0, 
                        A1*Foam::exp( -Foam::pow((cf[i].x() - C1), 2) / (2*B1*B1) ) 
                        + A2*Foam::exp( -Foam::pow((cf[i].x() - C2), 2) / (2*B2*B2) )
                        + A3*Foam::exp( -Foam::pow((cf[i].x() - C3), 2) / (2*B3*B3) )
                        + D,
                        0
                    ) ;
                 
            // refGrad:
                 this->refGrad()[i] = vector(0, 0, 0);

            // valueFraction:
              }
        #};
}
// ************************************************************************* //